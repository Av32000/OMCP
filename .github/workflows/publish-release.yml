name: Build and generate release on tag

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

jobs:
  build-binary:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-name: omcp
            asset-name: omcp-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: omcp.exe
            asset-name: omcp-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-name: omcp
            asset-name: omcp-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-name: omcp
            asset-name: omcp-macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename binary for consistent artifact naming (important for download/upload)
        shell: bash
        run: |
          BINARY_PATH="target/${{ matrix.target }}/release/${{ matrix.binary-name }}"
          ASSET_PATH="target/${{ matrix.target }}/release/${{ matrix.asset-name }}"

          if [ -f "$BINARY_PATH" ]; then
            mv "$BINARY_PATH" "$ASSET_PATH"
            echo "Renamed $BINARY_PATH to $ASSET_PATH"
          else
            echo "Binary not found at $BINARY_PATH"
            exit 1
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset-name }}
          path: target/${{ matrix.target }}/release/${{ matrix.asset-name }}
          retention-days: 1

  create-and-upload-release:
    name: Create and Upload Release
    runs-on: ubuntu-latest
    needs: build-binary
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag, or the first commit if there's no previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1` 2>/dev/null || git rev-list --max-parents=0 HEAD)

          echo "Previous tag: $PREVIOUS_TAG"

          # Get the current tag from the GitHub ref
          CURRENT_TAG=${{ github.ref_name }}
          echo "Current tag: $CURRENT_TAG"

          echo "Generating changelog between $PREVIOUS_TAG and $CURRENT_TAG"

          # Generate a concise changelog with commit hashes and subjects
          CHANGELOG=$(git log --pretty=format:"* %h - %s" $PREVIOUS_TAG..$CURRENT_TAG || echo "No changes found.")

          # Use a heredoc to set the multiline changelog as an output
          echo "changelog_body<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or Update GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: ${{ github.ref_name }}
          body: |
            ## ðŸš€ Changelog
            ${{ steps.changelog.outputs.changelog_body }}
          draft: true
          files: |
            artifacts/omcp-linux-amd64/omcp-linux-amd64
            artifacts/omcp-windows-amd64.exe/omcp-windows-amd64.exe
            artifacts/omcp-macos-amd64/omcp-macos-amd64
            artifacts/omcp-macos-arm64/omcp-macos-arm64
